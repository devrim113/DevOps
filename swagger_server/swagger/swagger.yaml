openapi: 3.0.0
info:
  title: Simple Inventory API
  description: This is a simple API
  contact:
    email: you@your-company.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0
servers:
- url: https://virtserver.swaggerhub.com/tutorial/1.0.0
  description: SwaggerHub API Auto Mocking
paths:
  /student/{student_id}:
    get:
      summary: Gets student
      description: Returns a single student
      operationId: get_student_by_id
      parameters:
      - name: student_id
        in: path
        description: The unique identifier of the student
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Student'
              examples:
                studentExample:
                  summary: Example Student
                  value:
                    student_id: "507f1f77bcf86cd799439011"
                    first_name: John
                    last_name: Doe
                    grade_records: []
        "400":
          description: Invalid ID supplied
        "404":
          description: Student not found
      x-openapi-router-controller: swagger_server.controllers.default_controller
    delete:
      summary: Deletes a student
      description: Delete a single student
      operationId: delete_student
      parameters:
      - name: student_id
        in: path
        description: The unique identifier of the student to delete
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Student deleted successfully
          content:
            application/json:
              examples:
                deleteExample:
                  summary: Successful Deletion
                  value:
                    message: "Student successfully deleted."
        "400":
          description: Bad Request
        "404":
          description: Student with specified student_id cannot be found
      x-openapi-router-controller: swagger_server.controllers.default_controller
  /student:
    post:
      summary: Add a new student
      description: Adds an item to the system
      operationId: add_student
      requestBody:
        description: Student item to add
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Student'
            examples:
              studentAddExample:
                summary: Add Student Example
                value:
                  first_name: Jane
                  last_name: Smith
                  grade_records:
                    - subject_name: Math
                      grade: 8
      responses:
        "200":
          description: Student created successfully
          content:
            application/json:
              examples:
                creationResponseExample:
                  summary: Creation Success
                  value:
                    student_id: "507f1f77bcf86cd799439011"
        "400":
          description: "Invalid input, object invalid"
        "409":
          description: Student already exists
      x-openapi-router-controller: swagger_server.controllers.default_controller
components:
  schemas:
    Student:
      required:
        - first_name
        - last_name
      type: object
      properties:
        student_id:
          type: string
          example: "507f1f77bcf86cd799439011"
        first_name:
          type: string
          example: "Jane"
        last_name:
          type: string
          example: "Doe"
        grade_records:
          type: array
          items:
            $ref: '#/components/schemas/GradeRecord'
    GradeRecord:
      required:
        - grade
        - subject_name
      type: object
      properties:
        subject_name:
          type: string
          example: "Math"
        grade:
          type: number
          format: float
          minimum: 1
          maximum: 10
          example: 8.5
